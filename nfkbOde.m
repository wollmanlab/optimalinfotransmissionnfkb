% This file is automatically generated by updateModel.m from the NFkB whole-cell spreadsheet.
% Model URL: multi-stimulus NFkB.xlsx

%% Section 1: Declaration/initialization (code from ode_init.m)
function delta = nfkbOde(t,x,ode_options,v)
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% delta = nfkbOde(t,x,ode_options,v)
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% Full NFkB ODE model - stiff system, designed to be solved using ode15 (see this function's help file to set
% options).  
% In phase 1 (v.PHASE == 1),simulation is run w/o stimulus, until convergence to initialize steady-state,
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

% Set the persistent variable that discrete-delay reactions refer to
persistent DELAY;
if isempty(t)
    % The sim function calls the ode function once without arguments to reset persistent variables
    sz = 5000; % Size of total delay memory - if DELAYS.idx exceeds this, function will throw error
    DELAY.t = zeros(sz,1);
    DELAY.nfkb = zeros(sz,1); % increase if getting errors
    DELAY.ikbat = zeros(sz,1); % increase if getting errors
    DELAY.idx     = 1; % index (starts at 1)
    return;
end


% Slice parameters, get previous concentrations
p = v.PARAMS;
delta = zeros(size(x));



%% Section 2: Unpack species
stim = x(1);
IkBa = x(2);
IkBan = x(3);
IkBaNFkB = x(4);
IkBaNFkBn = x(5);
IkBat = x(6);
IKKIkBaNFkB = x(7);
IKKIkBa = x(8);
NFkB = x(9);
NFkBn = x(10);
IKK_off = x(11);
IKK = x(12);
IKK_i = x(13);
LPS = x(14);
CD14 = x(15);
CD14LPS = x(16);
CD14LPSen = x(17);
TLR4 = x(18);
TLR4en = x(19);
TLR4LPS = x(20);
TLR4LPSen = x(21);
MyD88_off = x(22);
MyD88 = x(23);
TRIF_off = x(24);
TRIF = x(25);
TRAF6_off = x(26);
TRAF6 = x(27);
TNF = x(28);
TNFR = x(29);
TNFR_TNF = x(30);
TTR = x(31);
C1_off = x(32);
C1 = x(33);
TAK1_off = x(34);
TAK1 = x(35);
Pam3CSK = x(36);
TLR2 = x(37);
CD14_P3CSK = x(38);
TLR2_P3CSK = x(39);
polyIC = x(40);
polyIC_en = x(41);
TLR3 = x(42);
TLR3_polyIC = x(43);
CpG = x(44);
CpG_en = x(45);
TLR9 = x(46);
TLR9_CpG = x(47);
TLR9_N = x(48);


%% Section 3: Calculate delays (code from ode_delay.m)
% Initialize/calculate delays for discrete-delay reactions
% (Delays are manually set - if reactions are rearranged such that tau indicies change, this code 
% must be reset)

% Create a cache of previous species values for transcription/translation delays.
NFkBn_tau6   = NFkBn;
IkBat_tau8   = IkBat;
if v.PHASE ~= 1
    % Match current timepoint into t vector - append, if necessary
    idx = find(DELAY.t(1:DELAY.idx)>=t,1,'first');
    if isempty(idx)
        idx = DELAY.idx+1;
    end
    DELAY.t(idx) = t;
    DELAY.idx = idx;
    DELAY.nfkb(DELAY.idx) = NFkBn;
    DELAY.ikbat(DELAY.idx) = IkBat;
    if DELAY.idx > length(DELAY.t)
        error(['Delay index out of range: increase memory size (line 13 - ',...
            'sz = ',num2str(length(DELAY.t)),';). Reached t = ',num2str(DELAY.t(end))])
    end

    % 1) IkBa mRNA transcription/processing delay (RXN 6)
    tau = p(6,4);
    if tau > 0  % IkBa inducible txn delay
        if t > tau
            NFkBn_tau6 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.nfkb(1:DELAY.idx-1),t-tau);
        else
            NFkBn_tau6 = ...
                DELAY.nfkb(1); % 1st index is the steady-state value
        end
    end
    
    % 2) IkBa protein translation/maturation delay (RXN 8)
    tau = p(8,2);
    if tau > 0  % IkBb inducible txn delay
        if t > tau
            IkBat_tau8 = ...
                interp1(DELAY.t(1:DELAY.idx-1),...
                        DELAY.ikbat(1:DELAY.idx-1),t-tau);
        else
            IkBat_tau8 = ...
                DELAY.ikbat(1); % 1st index is the steady-state value
        end
    end
end

% Pulsed stimulus (ode_options.PULSE_TIME) - if time value is greater than pulse length, set external stimuli to zero
if isfield(v,'PULSE_TIME') && (t > v.PULSE_TIME)
    TNF = 0;
    LPS = 0;
    polyIC = 0;
    Pam3CSK = 0;
    CpG = 0;
    stim=0;
end



%% Section 4: Set reaction rates
rxn_1 = p(1,1) * stim * IKK_off;
rxn_2 = p(2,1) * IKK_off;
rxn_3 = p(3,1) * IKK;
rxn_4 = p(4,1) * IKK_i;
rxn_5 = p(5,1);
rxn_6 = p(6,1) * (NFkBn_tau6.^p(6,2))/( (NFkBn_tau6.^p(6,2)) + (p(6,3).^p(6,2)) );
rxn_7 = p(7,1) * IkBat;
rxn_8 = p(8,1) * IkBat_tau8;
rxn_9 = p(9,1) * IkBa;
rxn_10 = p(10,1) * NFkB;
rxn_11 = p(11,1) * IkBan;
rxn_12 = p(12,1) * NFkBn;
rxn_13 = p(13,1) * IkBaNFkB;
rxn_14 = p(14,1) * IkBaNFkBn;
rxn_15 = p(15,1) * IkBa;
rxn_16 = p(16,1) * IkBan;
rxn_17 = p(17,1) * IkBa * NFkB;
rxn_18 = p(18,1) * IkBan * NFkBn;
rxn_19 = p(19,1) * IkBaNFkB;
rxn_20 = p(20,1) * IkBaNFkBn;
rxn_21 = p(21,1) * IKK * IkBaNFkB;
rxn_22 = p(22,1) * IKK * IkBa;
rxn_23 = p(23,1) * IKKIkBaNFkB;
rxn_24 = p(24,1) * IKKIkBa;
rxn_25 = p(25,1) * IKKIkBaNFkB;
rxn_26 = p(26,1) * IKKIkBa;
rxn_27 = p(27,1) * LPS * CD14;
rxn_28 = p(28,1) * CD14LPS;
rxn_29 = p(29,1);
rxn_30 = p(30,1) * CD14;
rxn_31 = p(31,1) * CD14LPS * TLR4;
rxn_32 = p(32,1) * TLR4LPS;
rxn_33 = p(33,1) * CD14LPSen * TLR4en;
rxn_34 = p(34,1) * TLR4LPSen;
rxn_35 = p(35,1);
rxn_36 = p(36,1) * CD14LPS;
rxn_37 = p(37,1) * CD14LPSen;
rxn_38 = p(38,1) * TLR4;
rxn_39 = p(39,1) * TLR4en;
rxn_40 = p(40,1) * TLR4LPS;
rxn_41 = p(41,1) * TLR4LPSen;
rxn_42 = p(42,1) * CD14LPSen;
rxn_43 = p(43,1) * TLR4en;
rxn_44 = p(44,1) * TLR4LPSen;
rxn_45 = p(45,1) * (TLR4LPS.^p(45,2))/( (TLR4LPS.^p(45,2)) + (p(45,3).^p(45,2)) ) * MyD88_off;
rxn_46 = p(46,1) * MyD88;
rxn_47 = p(47,1) * TRIF_off * TLR4LPSen;
rxn_48 = p(48,1) * TRIF;
rxn_49 = p(49,1) * MyD88 * TRAF6_off;
rxn_50 = p(50,1) * TRIF * TRAF6_off;
rxn_51 = p(51,1) * TRAF6;
rxn_52 = p(52,1) * TRAF6 * TAK1_off;
rxn_53 = p(53,1) * TNF;
rxn_54 = p(54,1);
rxn_55 = p(55,1) * TNFR;
rxn_56 = p(56,1) * TNF * TNFR;
rxn_57 = p(57,1) * TNFR_TNF;
rxn_58 = p(58,1) * TNFR_TNF;
rxn_59 = p(59,1) * TNFR_TNF * TTR;
rxn_60 = p(60,1) * C1_off;
rxn_61 = p(61,1) * C1_off;
rxn_62 = p(62,1) * C1_off;
rxn_63 = p(63,1) * C1;
rxn_64 = p(64,1) * C1;
rxn_65 = p(65,1) * C1 * TAK1_off;
rxn_66 = p(66,1) * TAK1;
rxn_67 = p(67,1) * (TAK1.^p(67,2))/( (TAK1.^p(67,2)) + (p(67,3).^p(67,2)) ) * IKK_off;
rxn_68 = p(68,1);
rxn_69 = p(69,1) * TLR2;
rxn_70 = p(70,1) * Pam3CSK * CD14;
rxn_71 = p(71,1) * CD14_P3CSK;
rxn_72 = p(72,1) * CD14_P3CSK * TLR2;
rxn_73 = p(73,1) * CD14_P3CSK;
rxn_74 = p(74,1) * TLR2_P3CSK;
rxn_75 = p(75,1) * TLR2_P3CSK;
rxn_76 = p(76,1) * (TLR2_P3CSK.^p(76,2))/( (TLR2_P3CSK.^p(76,2)) + (p(76,3).^p(76,2)) ) * MyD88_off;
rxn_77 = p(77,1);
rxn_78 = p(78,1) * TLR3;
rxn_79 = p(79,1) * (polyIC.^p(79,3))/( (polyIC.^p(79,3)) + (p(79,2).^p(79,3)) );
rxn_80 = p(80,1) * polyIC_en;
rxn_81 = p(81,1) * polyIC_en * TLR3;
rxn_82 = p(82,1) * TLR3_polyIC;
rxn_83 = p(83,1) * TLR3_polyIC;
rxn_84 = p(84,1) * TRIF_off * TLR3_polyIC;
rxn_85 = p(85,1);
rxn_86 = p(86,1) * TLR9;
rxn_87 = p(87,1) * TLR9_N;
rxn_88 = p(88,1) * (CpG.^p(88,3))/( (CpG.^p(88,3)) + (p(88,2).^p(88,3)) );
rxn_89 = p(89,1) * CpG_en;
rxn_90 = p(90,1) * CpG_en * TLR9;
rxn_91 = p(91,1) * TLR9_CpG;
rxn_92 = p(92,1) * TLR9_CpG * TLR9_N;
rxn_93 = p(93,1) * TLR9_CpG;
rxn_94 = p(94,1) * (TLR9_CpG.^p(94,2))/( (TLR9_CpG.^p(94,2)) + (p(94,3).^p(94,2)) ) * MyD88_off;
rxn_95 = p(95,1) * NFkB;


%% Section 5: Set species' deltas from reactions
delta(1) = 0;
delta(2) = - rxn_9 - rxn_15 - rxn_17 - rxn_22 + rxn_8 + (rxn_11 * p(11,2)) + rxn_19 + rxn_24;
delta(3) = - rxn_11 - rxn_16 - rxn_18 + (rxn_9 * p(9,2)) + rxn_20;
delta(4) = - rxn_13 - rxn_19 - rxn_21 + (rxn_14 * p(14,2)) + rxn_17 + rxn_23;
delta(5) = - rxn_14 - rxn_20 + (rxn_13 * p(13,2)) + rxn_18;
delta(6) = - rxn_7 + rxn_5 + rxn_6;
delta(7) = - rxn_23 - rxn_25 + rxn_21;
delta(8) = - rxn_24 - rxn_26 + rxn_22;
delta(9) = - rxn_10 - rxn_17 - rxn_95 + (rxn_12 * p(12,2)) + rxn_19 + rxn_25;
delta(10) = - rxn_12 - rxn_18 + (rxn_10 * p(10,2)) + rxn_20;
delta(11) = - rxn_1 - rxn_2 - rxn_67 + rxn_4;
delta(12) = - rxn_3 - rxn_21 - rxn_22 + rxn_1 + rxn_2 + rxn_23 + rxn_24 + rxn_25 + rxn_26 + rxn_67;
delta(13) = - rxn_4 + rxn_3;
delta(14) = - (rxn_27 * p(27,2)) + (rxn_28 * p(28,2));
delta(15) = - rxn_27 - rxn_30 - rxn_70 + rxn_28 + rxn_29 + rxn_71;
delta(16) = - rxn_28 - rxn_31 - rxn_36 + rxn_27 + rxn_32 + rxn_37;
delta(17) = - rxn_33 - rxn_37 - rxn_42 + rxn_34 + rxn_36;
delta(18) = - rxn_31 - rxn_38 + rxn_32 + rxn_35 + rxn_39;
delta(19) = - rxn_33 - rxn_39 - rxn_43 + rxn_34 + rxn_38;
delta(20) = - rxn_32 - rxn_40 + rxn_31 + rxn_41;
delta(21) = - rxn_34 - rxn_41 - rxn_44 + rxn_33 + rxn_40;
delta(22) = - rxn_45 - rxn_76 - rxn_94 + rxn_46;
delta(23) = - rxn_46 + rxn_45 + rxn_76 + rxn_94;
delta(24) = - rxn_47 - rxn_84 + rxn_48;
delta(25) = - rxn_48 + rxn_47 + rxn_84;
delta(26) = - rxn_49 - rxn_50 + rxn_51;
delta(27) = - rxn_51 + rxn_49 + rxn_50;
delta(28) = - rxn_53 - (rxn_56 * p(56,2)) + (rxn_57 * p(57,2));
delta(29) = - rxn_55 - rxn_56 + rxn_54 + rxn_57;
delta(30) = - rxn_57 - rxn_58 - rxn_59 + rxn_56 + rxn_60;
delta(31) = - rxn_59 + rxn_60;
delta(32) = - rxn_60 - rxn_61 - rxn_62 + rxn_59 + rxn_63;
delta(33) = - rxn_63 - rxn_64 + rxn_62;
delta(34) = - rxn_52 - rxn_65 + rxn_66;
delta(35) = - rxn_66 + rxn_52 + rxn_65;
delta(36) = - (rxn_70 * p(70,2)) + (rxn_71 * p(71,2));
delta(37) = - rxn_69 - rxn_72 + rxn_68 + rxn_74;
delta(38) = - rxn_71 - rxn_72 - rxn_73 + rxn_70 + rxn_74;
delta(39) = - rxn_74 - rxn_75 + rxn_72;
delta(40) = - (rxn_79 * p(79,4)) + (rxn_80 * p(80,2));
delta(41) = - rxn_80 - rxn_81 + rxn_79 + rxn_82;
delta(42) = - rxn_78 - rxn_81 + rxn_77 + rxn_82;
delta(43) = - rxn_82 - rxn_83 + rxn_81;
delta(44) = - (rxn_88 * p(88,4)) + (rxn_89 * p(89,2));
delta(45) = - rxn_89 - rxn_90 + rxn_88 + rxn_91;
delta(46) = - rxn_86 - rxn_90 + rxn_85 + rxn_91;
delta(47) = - rxn_91 - rxn_92 - rxn_93 + rxn_90;
delta(48) = - rxn_87 - rxn_92 + rxn_85;
